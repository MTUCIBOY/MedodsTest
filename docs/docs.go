// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authTokens": {
            "post": {
                "description": "Выполняет аутентификацию по email и паролю, возвращает Access и Refresh токены",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Аутентификация пользователя",
                "parameters": [
                    {
                        "description": "Данные для аутентификации (email и пароль)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authtokens.userRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access и Refresh токены",
                        "schema": {
                            "$ref": "#/definitions/authtokens.userResponse"
                        }
                    },
                    "400": {
                        "description": "Неправильное тело запроса",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неверный email или пароль",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deauthTokens": {
            "post": {
                "description": "Деактивирует Refresh Token пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Деавторизация пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access Token для деактивации",
                        "name": "Access-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Refresh Token для деактивации",
                        "name": "Refresh-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Сессия успешно завершена"
                    },
                    "401": {
                        "description": "Невалидный Refresh Token",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Refresh Token не активен",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/guid": {
            "get": {
                "description": "Возвращает уникальный идентификатор (GUID) текущего пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Получение GUID пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access Token",
                        "name": "Access-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Refresh Token",
                        "name": "Refresh-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GUID пользователя",
                        "schema": {
                            "$ref": "#/definitions/getguid.userResponse"
                        }
                    },
                    "401": {
                        "description": "Невалидные токены",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registrate": {
            "post": {
                "description": "Регистрирует нового пользователя по email и паролю",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации (email и пароль)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newuser.userRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пользователь успешно зарегистрирован"
                    },
                    "400": {
                        "description": "Неверный запрос или email уже существует",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Невалидные токены",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/updateTokens": {
            "post": {
                "description": "Генерирует новый Access Token на основе Refresh Token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Обновление Access Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access Token",
                        "name": "Access-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Refresh Token",
                        "name": "Refresh-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Новый Access Token",
                        "schema": {
                            "$ref": "#/definitions/updatetokens.userResponse"
                        }
                    },
                    "401": {
                        "description": "Невалидный Refresh Token или отсутствие email в контексте",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/errorresponse.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authtokens.userRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "authtokens.userResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "errorresponse.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "getguid.userResponse": {
            "type": "object",
            "properties": {
                "guid": {
                    "type": "string"
                }
            }
        },
        "newuser.userRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "updatetokens.userResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8888",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Auth Service API",
	Description:      "Сервис авторизации, который использует два JWT-токена:",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
